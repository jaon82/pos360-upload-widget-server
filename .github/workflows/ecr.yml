name: ECR Image

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        id: configure-aws-credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2.0.1

      - name: Generate tag
        id: generate-tag
        run: |
          SHA=$(echo $GITHUB_SHA | head -c7)
          echo "sha=$SHA" >> $GITHUB_OUTPUT

      - name: Build image
        id: build-image
        run: docker build -t ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY }}:${{steps.generate-tag.outputs.sha}} .

      - name: Run Trivy vulnerability scanner
        id: run-trivy-scanner
        uses: aquasecurity/trivy-action@0.29.0
        with:
          image-ref: "${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY }}:${{steps.generate-tag.outputs.sha}}"
          format: "table"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH"

      - name: Push image to AWS ECR
        id: push-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
          IMAGE_TAG: ${{steps.generate-tag.outputs.sha}}
        run: docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # - name: Deploy to App Runner
      #   id: deploy-app-runner
      #   uses: awslabs/amazon-app-runner-deploy@main
      #   with:
      #     service: ${{ vars.APP_RUNNER_SERVICE_NAME }}
      #     image: ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY }}:${{steps.generate-tag.outputs.sha}}
      #     access-role-arn: ${{ secrets.ROLE_ARN }}
      #     region: ${{ vars.AWS_REGION }}
      #     cpu: 1
      #     memory: 2
      #     port: 3333
      #     wait-for-service-stability-seconds: 180

      # - name: App Runner Check
      #   run: echo "App running... ${{steps.deploy-app-runner.outputs.service-url}}"

      - name: Render Task Definition
        id: render-task-definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: .aws/task-definition.json
          container-name: widget-server
          image: ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY }}:${{steps.generate-tag.outputs.sha}}

      - name: Deploy Amazon ECS Task Definition
        id: deploy-task-definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
        with:
          task-definition: ${{ steps.render-task-definition.outputs.task-definition }}
          service: widget-server
          cluster: rocketseat-ecs
          wait-for-service-stability: true
